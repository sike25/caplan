Project-5 production rules: Revenge of The Procedures

<program> ::= <multi var decl> <proc decl list>

##### VARIABLE DECLARATIONS
<multi var decl> ::= '[' <var decl list> ']'
<var decl list>  ::= <var decl> ',' <var decl list> | <var decl>
<var decl>       ::= <type> <name> | ðŸ¥º
<type>           ::= <name> '*'*

##### PROCEDURE DECLARATIONS
<proc decl list>  ::= <proc decl> <proc decl list> | ðŸ¥º
<proc decl>       ::= 'extern' <type> <name> '(' <param decl list> ')' |
                      'proc'   <type> <name> '(' <var decl list> ')' <multi var decl> <statement>
<param decl list> ::= <var decl> ',' <param decl list> | ( <var decl> | 'etcetera' )

##### STATEMENTS (we no longer parse print statements)
<stmt>       ::= <multi stmt> | <control stmt> | <return stmt> | <print stmt> | <exp>
<multi stmt> ::= '{' <stmt list> '}'                   
<stmt list>  ::= <stmt> <stmt list> | ðŸ¥º

##### CONTROL STATEMENTS
<control stmt> ::= <conditional> | <loop>
<conditional>  ::= 'if' <exp> <statement> [ 'else' <statement> ]
<loop>         ::= 'while' <exp> <statement>

##### EXPRESSIONS
<exp>       ::= <sizeof> | <literal> | <operation> | <name>
<sizeof>    ::= 'sizeof' '(' <type> ')'
<operation> ::= '(' <operator> <expression list> ')'
<operator>  ::= { @ - * ! + / % = == != < > || && | & ^ } | <name>
<name>      ::= ( <alphabetic char> | '_' ) ( <alphabetic char> | <digit char> | '_' )*

##### LITERALS
<literal>        ::= <int literal> | <char literal> | <bool literal>
<int literal>    ::= <digit>+
<char literal>   ::= ''' <character> '''
<bool literal>   ::= 'true' | 'false'
<string literal> ::= '"' <character>* '"'

##### ðŸ¥º
ðŸ¥º ::= <EMPTY>

##### OPERATOR REFERENCE
UNARY
	@, reference
	-, negation
	*, dereference
	!, not
	~, bitwise not (invert)

BINARY
	+, addition
	-, subtraction
	*, multiplication
	/, integer division
	%, modulo
	=, assignment
	
COMPARISON OPERATORS (BINARY)
	==, equality
	!=, not equals
	<,  less than
	<=, less than or equal
	>,  greater than
	>=, greater than or equal

LOGICAL OPERATORS (BINARY)
	||, or
	&&, and
	
BITWISE OPERATORS (BINARY)
	|,  bitwise or
	&,  bitwise and
	^,  bitwise xor
	<<, shift left
	>>, shift right

Example:

# Global variables.
[ char newline ]

# External procedures.
extern void* malloc (int size)
extern int   printf (char* format, ...) # !!!

int main (int argc, char** argv) {

    (= newline '\n')
    xxx  

}


