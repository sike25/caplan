// =================================================================================================================================
// IMPORTS

import java.util.Map;
// =================================================================================================================================



// =================================================================================================================================
/**
 * A byte-sized character literal.
 */
public class BooleanLiteral extends Literal {
// =================================================================================================================================


    
    // =============================================================================================================================
    // DATA MEMBERS

    /** The boolean stored. */
    public final boolean _value;
    // =============================================================================================================================


    
    // =============================================================================================================================
    /**
     * A new literal boolean value.
     *
     * @param token The token representing the boolean literal.
     */
    public BooleanLiteral (Token token) {

        super(token, new TypeBoolean(token._position));
	_value = token._text.equals("true");

    } // BooleanLiteral ()
    // =============================================================================================================================


    
    // =============================================================================================================================
    /**
     * Generate assembly code that will execute this expression.
     *
     * @return the generated assembly code.
     */
    public String toAssembly () {

	// Evaluating a literal involves pushing its value onto the stack.  A boolean is represented via 0 for false, 1 for true.
	return "\tpush\t" + (_value ? 1 : 0) + "\t\t; " + _value + '\n';
	
    } // toAssembly ()
    // =============================================================================================================================
    


    // =============================================================================================================================
    public String toString() {

        return "" + _value;

    } // toString ()
    // =============================================================================================================================

    
    
// =================================================================================================================================
} // class BooleanLiteral
// =================================================================================================================================
