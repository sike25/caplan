// =================================================================================================================================
// IMPORTS

import java.util.Map;
// =================================================================================================================================



// =================================================================================================================================
/**
 * A word-sized integer literal.
 */
abstract public class Literal extends Expression {
// =================================================================================================================================



    // =============================================================================================================================
    // DATA MEMBERS

    /** The type of the literal. */
    private Type _type;
    // =============================================================================================================================



    // =============================================================================================================================
    /**
     * A new literal value.
     *
     * @param token The token representing the literal.
     * @param type  The type of the literal.
     */
    public Literal (Token token, Type type) {

    	super(token._position);
        _type = type;

    } // Literal ()
    // =============================================================================================================================


    
    // =============================================================================================================================
    /**
     * A new literal value.
     *
     * @param position The position of the token yielding the literal.
     * @param type     The type of the literal.
     */
    public Literal (int position, Type type) {

	super(position);
	_type = type;

    } // Literal ()
    // =============================================================================================================================



    // =============================================================================================================================
    /**
     * Whether this expression can have a reference to itself.  Literals cannot.
     *
     * @return <code>false</code>
     */
    public boolean hasReference () {
	
        return false;
	
    } // hasReference ()
    // =============================================================================================================================


    
    // =============================================================================================================================
    /**
     * Bind each variable used to its declaration.  There are no variables in a literal, so do nothing.
     *
     * @param procedure The procedure to which this expression belongs.
     * @param symbols The symbol table of variable declarations.
     */
    public void bind (Procedure procedure, Map<String, Declaration> symbols) {

	setProcedure(procedure);
       
    }
    // =============================================================================================================================
    


    // =============================================================================================================================
    /**
     * Nothing to verify in a literal object
     * 
     * @return the type of this expression's evaluation.
     */
    public Type verify () {
	
        return _type;
	
    } // verify ()
    // =============================================================================================================================



    // =============================================================================================================================
    /**
     * Return the type of produced by evaluating this expression.
     *
     * @return the type when evaluated.
     */
    public Type getType () {

	return _type;

    } // getType ();
    // =============================================================================================================================


    
// =================================================================================================================================
} // class Literal
// =================================================================================================================================
